# -*- coding: utf-8 -*-
"""Smoking No Smoking Flutter

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11LDyAh0KWQCX5mlELPX77nkztxaXhv3D
"""

!apt-get install chromium-browser

# Commented out IPython magic to ensure Python compatibility.
# %rm -r /content/dataset_smoking/downloads

# Commented out IPython magic to ensure Python compatibility.
#install lib.
!pip install google_images_download
!git clone https://github.com/Joeclinton1/google-images-download.git
# %cd google-images-download 
!python setup.py install
!mkdir /content/dataset
# %cd /content/dataset

!apt install chromium-chromedriver

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/dataset_smoking

!ls

#download some images from google 50 for 
!python3 /content/google-images-download/google_images_download/google_images_download.py -k animals,person -f jpg  -l 100

!wget -N 'https://cainvas-static.s3.amazonaws.com/media/user_data/cainvas-admin/spiders.tar.gz'
import tarfile
file = tarfile.open('spiders.tar.gz')
file.extractall('./')
file.close()



# Commented out IPython magic to ensure Python compatibility.
# %cd /content/spiders
!find .ipynb_checkpoints
!rm  -r .ipynb_checkpoints

import os
import imghdr
path = '/content/dataset_smoking/downloads/'
count=0
for i in range(2):
  directory_contents = os.listdir(path)
  directory = directory_contents[i] 
  #print(directory)
   #import os
  collection = path+'/'+directory+'/'
 # print(collection)
  for j, filename in enumerate(os.listdir(collection)):
    #print(path+directory+'/'+filename)
    #print(imghdr.what(path+directory+'/'+filename))
    msg=imghdr.what(path+directory+'/'+filename)
    print(msg)
    if(msg=='webp'):
      print('file name:',filename)
      path_to_file = os.path.join(collection, filename)
      os.remove(path_to_file)
      count=count+1
print('count:',count)
#import imghdr
#path = '/content/dataset/downloads/Frog/46.p_guttmani3.jpg'
#imghdr.what(path)

!pip install -q tflite-model-maker

import os
import numpy as np
import tensorflow as tf
assert tf.__version__.startswith('2')
from tflite_model_maker import model_spec
from tflite_model_maker import image_classifier
from tflite_model_maker.config import ExportFormat
from tflite_model_maker.config import QuantizationConfig
from tflite_model_maker.image_classifier import DataLoader
import matplotlib.pyplot as plt

image_path='/content/spiders/train'
data = DataLoader.from_folder(image_path)
#train_data, test_data = data.split(0.9)

#model = image_classifier.create(train_data)
train_data, rest_data = data.split(0.8)
validation_data, test_data = rest_data.split(0.5)

model = image_classifier.create(train_data, validation_data=validation_data, epochs=10)

loss, accuracy = model.evaluate(test_data)

plt.figure(figsize=(10,10))
for i, (image, label) in enumerate(data.gen_dataset().unbatch().take(25)):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(image.numpy(), cmap=plt.cm.gray)
  plt.xlabel(data.index_to_label[label.numpy()])
plt.show()

# A helper function that returns 'red'/'black' depending on if its two input
# parameter matches or not.
def get_label_color(val1, val2):
  if val1 == val2:
    return 'black'
  else:
    return 'red'

# Then plot 100 test images and their predicted labels.
# If a prediction result is different from the label provided label in "test"
# dataset, we will highlight it in red color.
plt.figure(figsize=(30, 30))
predicts = model.predict_top_k(test_data)
for i, (image, label) in enumerate(test_data.gen_dataset().unbatch().take(36)):
  ax = plt.subplot(6, 6, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(image.numpy(), cmap=plt.cm.gray)

  predict_label = predicts[i][0][0]
  color = get_label_color(predict_label,
                          test_data.index_to_label[label.numpy()])
  ax.xaxis.label.set_color(color)
  plt.xlabel('Predicted: %s' % predict_label)
plt.show()

model.export(export_dir='/content/model16', export_format=ExportFormat.LABEL)
config = QuantizationConfig.for_float16()
model.export(export_dir='/content/model16', tflite_filename='model_spider.tflite', quantization_config=config)